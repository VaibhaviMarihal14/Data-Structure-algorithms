Bucket Sort :

Bucket sort, or bin sort, is a sorting algorithm that works by 
distributing the elements of an array into a number of buckets. 
Each bucket is then sorted individually, using a different sorting algorithm.

Bucket sort is mainly useful when input is uniformly distributed over a range. For example, consider the following problem.
Sort a large set of floating point numbers which are in range from 0.0 to 1.0 and are uniformly distributed across the range.



The idea is to use bucket sort. Following is bucket algorithm.

bucketSort(arr[], n)
1) Create n empty buckets (Or lists).
2) Do following for every array element arr[i].
.......a) Insert arr[i] into bucket[n*array[i]]
3) Sort individual buckets using insertion sort.
4) Concatenate all sorted buckets.



The average time complexity for Bucket Sort is O(n + k). 
The worst time complexity is O(nÂ²). 
The space complexity for Bucket Sort is O(n+k).



Program : C++

#include <iostream> 
#include <algorithm> 
#include <vector> 
using namespace std; 

void bucketSort(float arr[], int n) 
{ 
	vector<float> b[n]; 

	for (int i=0; i<n; i++) 
	{ 
	int bi = n*arr[i]; 
	b[bi].push_back(arr[i]); 
	} 

	for (int i=0; i<n; i++) 
	sort(b[i].begin(), b[i].end()); 

	int index = 0; 
	for (int i = 0; i < n; i++) 
		for (int j = 0; j < b[i].size(); j++) 
		arr[index++] = b[i][j]; 
} 

int main() 
{ 
	float arr[] = {0.897, 0.565, 0.656, 0.1234, 0.665, 0.3434}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	bucketSort(arr, n); 

	cout << "Sorted array is \n"; 
	for (int i=0; i<n; i++) 
	cout << arr[i] << " "; 
	return 0; 
} 









Program : PYTHON

def insertionSort(b): 
	for i in range(1, len(b)): 
		up = b[i] 
		j = i - 1
		while j >=0 and b[j] > up: 
			b[j + 1] = b[j] 
			j -= 1
		b[j + 1] = up	 
	return b	 
			
def bucketSort(x): 
	arr = [] 
	slot_num = 10
	for i in range(slot_num): 
		arr.append([]) 
 
	for j in x: 
		index_b = int(slot_num * j) 
		arr[index_b].append(j) 

	for i in range(slot_num): 
		arr[i] = insertionSort(arr[i]) 

	k = 0
	for i in range(slot_num): 
		for j in range(len(arr[i])): 
			x[k] = arr[i][j] 
			k += 1
	return x 

x = [0.897, 0.565, 0.656, 
	0.1234, 0.665, 0.3434] 
print("Sorted Array is") 
print(bucketSort(x)) 


Output:

Sorted array is
0.1234 0.3434 0.565 0.656 0.665 0.897